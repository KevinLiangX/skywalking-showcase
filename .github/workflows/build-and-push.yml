# SkyWalking Showcase 镜像构建和推送工作流
# 支持手动执行和issue评论触发，推送到阿里云容器服务

name: Build and Push to Alibaba Cloud

# 触发条件：仅支持手动执行
on:
  workflow_dispatch:
    inputs:
      services:
        description: '要构建的服务 (用逗号分隔，留空构建所有服务)'
        required: false
        default: ''
        type: string
      tag:
        description: '镜像标签'
        required: true
        default: 'manual'
        type: string
      push_to_registry:
        description: '是否推送到阿里云容器服务'
        type: boolean
        required: false
        default: true

# 环境变量配置
env:
  # 阿里云容器镜像服务配置
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}  # 例如: your-registry.cn-hangzhou.cr.aliyuncs.com
  ACR_NAMESPACE: ${{ secrets.ACR_NAMESPACE }} # 例如: skywalking-showcase
  
  # SkyWalking Agent版本配置
  SW_AGENT_NODEJS_FRONTEND_VERSION: dce0d5b39ab95b8062031bc74e6f7a191f08e186
  SW_AGENT_NODEJS_BACKEND_VERSION: 59ef1aed6a404e2e8afffbb4b81ea849ae4f3026
  SW_AGENT_GO_IMAGE: ghcr.io/apache/skywalking-go/skywalking-go:154de50628e82e590941585411299459e352317d-go1.19
  SW_AGENT_JAVA_IMAGE: ghcr.io/apache/skywalking-java/skywalking-java:26ef911aea908759795bb6f5f2f6be56370d30cc-java8
  
  # 构建配置
  DOCKER_BUILDKIT: 1

# 权限配置
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # 准备构建矩阵
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置构建矩阵
        id: set-matrix
        run: |
          # 定义所有可用的服务（使用正确的路径）
          ALL_SERVICES='["app-frontend", "app-server", "gateway-service", "rating-service", "recommendation-service", "songs-service", "load-gen"]'
          
          # 检查是否指定了特定服务
          if [ "${{ github.event.inputs.services }}" != "" ]; then
            # 手动指定的服务
            SERVICES=$(echo '${{ github.event.inputs.services }}' | jq -R 'split(",") | map(select(length > 0) | gsub("^\\s+|\\s+$"; ""))')
            echo "构建指定服务: $SERVICES"
          else
            # 默认构建所有服务
            SERVICES=$ALL_SERVICES
            echo "构建所有服务"
          fi
          
          echo "matrix=$SERVICES" >> $GITHUB_OUTPUT
          
      - name: 设置镜像标签
        id: set-tag
        run: |
          TAG="${{ github.event.inputs.tag }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "使用镜像标签: $TAG"

  # 构建和推送镜像
  build:
    needs: prepare
    if: needs.prepare.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.matrix) }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于构建SkyWalking Agent
          
      - name: 设置Java环境 (仅Java服务)
        if: contains(fromJson('["gateway-service", "songs-service"]'), matrix.service)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          
      - name: 构建Java应用 (仅Java服务)
        if: contains(fromJson('["gateway-service", "songs-service"]'), matrix.service)
        run: |
          cd services/${{ matrix.service }}
          chmod +x gradlew
          ./gradlew build -x test
          
      - name: 设置Node.js环境 (仅Node.js服务)
        if: contains(fromJson('["app-frontend", "app-server"]'), matrix.service)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: 安装Node.js依赖 (仅Node.js服务)
        if: contains(fromJson('["app-frontend", "app-server"]'), matrix.service)
        run: |
          case "${{ matrix.service }}" in
            "app-frontend")
              cd services/app/frontend
              # 检查是否存在 package-lock.json
              if [ -f "package-lock.json" ]; then
                echo "使用 npm ci 进行安装..."
                npm ci
              else
                echo "缺少 package-lock.json，使用 npm install..."
                npm install
              fi
              ;;
            "app-server")
              cd services/app/server
              # 检查是否存在 package-lock.json
              if [ -f "package-lock.json" ]; then
                echo "使用 npm ci 进行安装..."
                npm ci
              else
                echo "缺少 package-lock.json，使用 npm install..."
                npm install
                # 生成 package-lock.json 供后续使用
                echo "生成 package-lock.json 文件"
              fi
              ;;
          esac
          
      - name: 设置Python环境 (仅Python服务)
        if: contains(fromJson('["recommendation-service", "load-gen"]'), matrix.service)
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: 设置Go环境 (仅Go服务)
        if: matrix.service == 'rating-service'
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: false  # 禁用自动缓存，手动处理
          
      - name: 初始化Go模块 (仅Go服务)
        if: matrix.service == 'rating-service'
        run: |
          cd services/rating-service
          # 初始化Go模块如果不存在
          if [ ! -s go.mod ]; then
            go mod init rating-service
            go mod tidy
          fi
          # 检查和更新依赖
          go mod download
          go mod tidy
          
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          
      - name: 登录阿里云容器镜像服务
        if: github.event.inputs.push_to_registry != 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      - name: 设置构建路径和Dockerfile
        id: build-config
        run: |
          case "${{ matrix.service }}" in
            "app-frontend")
              echo "context=./services/app/frontend" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
              echo "image_name=app-frontend" >> $GITHUB_OUTPUT
              ;;
            "app-server")
              echo "context=./services/app/server" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
              echo "image_name=app-server" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "context=./services/${{ matrix.service }}" >> $GITHUB_OUTPUT
              echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
              echo "image_name=${{ matrix.service }}" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: 提取镜像元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ steps.build-config.outputs.image_name }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
          
      - name: 构建镜像 (仅测试)
        if: github.event.inputs.push_to_registry == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.build-config.outputs.context }}
          file: ${{ steps.build-config.outputs.context }}/${{ steps.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SW_AGENT_NODEJS_FRONTEND_VERSION=${{ env.SW_AGENT_NODEJS_FRONTEND_VERSION }}
            SW_AGENT_NODEJS_BACKEND_VERSION=${{ env.SW_AGENT_NODEJS_BACKEND_VERSION }}
            SW_AGENT_GO_IMAGE=${{ env.SW_AGENT_GO_IMAGE }}
            SW_AGENT_JAVA_IMAGE=${{ env.SW_AGENT_JAVA_IMAGE }}
            
      - name: 构建并推送镜像
        if: github.event.inputs.push_to_registry != 'false'
        uses: docker/build-push-action@v5
        id: build
        with:
          context: ${{ steps.build-config.outputs.context }}
          file: ${{ steps.build-config.outputs.context }}/${{ steps.build-config.outputs.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            SW_AGENT_NODEJS_FRONTEND_VERSION=${{ env.SW_AGENT_NODEJS_FRONTEND_VERSION }}
            SW_AGENT_NODEJS_BACKEND_VERSION=${{ env.SW_AGENT_NODEJS_BACKEND_VERSION }}
            SW_AGENT_GO_IMAGE=${{ env.SW_AGENT_GO_IMAGE }}
            SW_AGENT_JAVA_IMAGE=${{ env.SW_AGENT_JAVA_IMAGE }}
            
      - name: 输出构建结果
        run: |
          echo "## 🐳 镜像构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**服务:** ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "**标签:** ${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**镜像:** ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ steps.build-config.outputs.image_name }}:${{ needs.prepare.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.push_to_registry }}" != "false" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "**状态:** ✅ 已推送到阿里云容器服务" >> $GITHUB_STEP_SUMMARY
          else
            echo "**状态:** 🔍 仅构建测试，未推送" >> $GITHUB_STEP_SUMMARY
          fi

  # 汇总构建结果
  summary:
    needs: [prepare, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 生成构建报告
        run: |
          echo "# 🚀 SkyWalking Showcase 构建报告" > build-report.md
          echo "" >> build-report.md
          echo "**构建时间:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build-report.md
          echo "**触发方式:** 手动执行" >> build-report.md
          echo "**指定服务:** ${{ github.event.inputs.services }}" >> build-report.md
          echo "**镜像标签:** ${{ needs.prepare.outputs.tag }}" >> build-report.md
          echo "**推送到注册表:** ${{ github.event.inputs.push_to_registry }}" >> build-report.md
          echo "" >> build-report.md
          
          # 构建状态
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "## ✅ 构建成功" >> build-report.md
            echo "" >> build-report.md
            echo "所有服务镜像构建完成！" >> build-report.md
          elif [ "${{ needs.build.result }}" = "failure" ]; then
            echo "## ❌ 构建失败" >> build-report.md
            echo "" >> build-report.md
            echo "部分服务构建失败，请检查构建日志。" >> build-report.md
          else
            echo "## ⚠️ 构建被跳过" >> build-report.md
            echo "" >> build-report.md
            echo "没有检测到需要构建的服务变更。" >> build-report.md
          fi
          
          echo "" >> build-report.md
          echo "## 📋 构建的服务" >> build-report.md
          echo "" >> build-report.md
          
          # 显示构建的服务列表
          SERVICES='${{ needs.prepare.outputs.matrix }}'
          if [ "$SERVICES" != "[]" ]; then
            echo "$SERVICES" | jq -r '.[] | "- " + .'
          else
            echo "- 无服务需要构建"
          fi >> build-report.md
          
          echo "" >> build-report.md
          echo "## 🔗 镜像地址" >> build-report.md
          echo "" >> build-report.md
          
          if [ "${{ github.event.inputs.push_to_registry }}" != "false" ]; then
            echo "镜像已推送到阿里云容器服务：" >> build-report.md
            echo "" >> build-report.md
            echo "\`\`\`" >> build-report.md
            echo "$SERVICES" | jq -r '.[] | if . == "app-frontend" then "${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/app-frontend:${{ needs.prepare.outputs.tag }}" elif . == "app-server" then "${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/app-server:${{ needs.prepare.outputs.tag }}" else "${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/" + . + ":${{ needs.prepare.outputs.tag }}" end' >> build-report.md
            echo "\`\`\`" >> build-report.md
          else
            echo "镜像仅构建测试，未推送到注册表。" >> build-report.md
          fi
          
          # 输出到GitHub Summary
          cat build-report.md >> $GITHUB_STEP_SUMMARY
          
      - name: 保存构建报告
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 30

